SHELL := /bin/bash
PIP_ENV:=$(shell pipenv --venv)
ROOT_DIR:=$(shell dirname $(realpath $(lastword $(MAKEFILE_LIST))))
DESTDIR ?= ~/.local/bin/
SIGN := 1

ifeq ($(OS),Windows_NT)
    UNAME := Windows
else
    UNAME := $(shell uname -s)
endif

.PHONY: shell
shell:
	@pipenv shell

.PHONY: setup
setup: set-hooks
	@pipenv sync --dev

.PHONY: Pipfile.lock
Pipfile.lock:
	@pipenv lock

.PHONY: requirements.txt
requirements.txt:
	@echo "Generating requirements.txt"
	@echo "# DO NOT EDIT. This file is generated by running 'make requirements.txt'" > requirements.txt
	@pipenv requirements --hash >> requirements.txt

.PHONY: set-hooks
set-hooks:
	@echo "Setting commit hooks"
	@ ([ ! -L ".git/hooks/pre-commit" ] && \
		ln -s $(PWD)/scripts/git-hooks/pre-commit.sh .git/hooks/pre-commit) \
		|| true

.PHONY: format
format:
	@pipenv run black -l 79 ./mtls/*.py
	@pipenv run black -l 79 ./test/*.py

.PHONY: lint
lint:
	@pipenv run pycodestyle **/*.py

.PHONY: build
build: setup
	@pipenv run python -m build

.PHONY: run
run:
	@pipenv run python3 bin/mtls $(ARGS)

.PHONY: test
test: setup
	-@pipenv run coverage run -m unittest -v

.PHONY: test-by-name
test-by-name:
	-@pipenv run coverage run -m unittest $(NAME) -v

.PHONY: coverage
coverage:
	-@pipenv run coverage report -m

.PHONY: coveralls
coveralls:
	@pipenv run coveralls

.PHONY: clean
clean:
	@rm dist || true
	@pipenv clean

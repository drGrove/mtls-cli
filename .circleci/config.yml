version: 2.1

commands:
  pip_install:
    description: "Install using pipenv and caching."
    parameters:
      key:
        type: string
        default: linux
      dir:
        type: string
        default: /root/.local/share/virtualenvs/
    steps:
      - restore_cache:
          key: pip-<< parameters.key >>-{{ .Branch }}-{{ checksum "Pipfile" }}-{{ checksum "Pipfile.lock" }}
      - run:
          name: Pipenv Install
          command: |
            python -m pip install --user pip
            python -m pip install --user pipenv
            python -m pipenv install --dev
          environment:
            PIP_SHIMS_BASE_MODULE: pipenv.patched.notpip
      - save_cache:
          key: pip-<< parameters.key >>-{{ .Branch }}-{{ checksum "Pipfile" }}-{{ checksum "Pipfile.lock" }}
          paths:
          - << parameters.dir >>
  test:
    description: "Run Tests"
    parameters:
      dir:
        type: string
        default: ~/mtls-cli/.tmp/
    steps:
      - run:
          name: Setup
          command: mkdir -p << parameters.dir >>
          environment:
            TMPDIR: << parameters.dir >>
      - run:
          name: Test
          command: make test
          environment:
            TMPDIR: << parameters.dir >>
  apt:
    description: "Install apt dependencies"
    steps:
      - run:
          name: Apt Install
          command: sudo apt install -y gnupg libnss3 make golang
  brew:
    description: "Install brew dependencies"
    steps:
      - run:
          name: Brew Install
          command: |
            brew upgrade
            brew update
            brew install python3 gnupg pipenv || true

executors:
  linux:
    docker:
      - image: cimg/python:3.11
        environment:
          PIPENV_VENV_IN_PROJECT: true
  osx:
    macos:
      xcode: "10.0.0"

jobs:
  init:
    executor: linux
    working_directory: ~/mtls-cli
    steps:
      - checkout
      - setup_remote_docker
      - pip_install
      - run:
          name: Setup
          command: |
            make setup
      - persist_to_workspace:
          root: ~/mtls-cli
          paths:
            - .coveragerc
            - .git/*
            - .tmp/*
            - bin/*
            - Makefile
            - Pipfile
            - Pipfile.lock
            - README.md
            - build/*
            - dist/*
            - mtls/**/*
            - password_word_list
            - requirements.txt
            - scripts/*
            - setup.py
            - test/*

  lint:
    executor: linux
    working_directory: ~/mtls-cli
    steps:
      - attach_workspace:
          at: ~/mtls-cli
      - pip_install
      - run:
          name: Lint
          command: make lint

  build-package-pypi:
    executor: linux
    working_directory: ~/mtls-cli
    steps:
      - attach_workspace:
          at: ~/mtls-cli
      - pip_install
      - run:
          name: Create Distribution
          command: make build
      - store_artifacts:
          path: dist/

  test:
    executor: linux
    working_directory: ~/mtls-cli
    steps:
      - attach_workspace:
          at: ~/mtls-cli
      - apt
      - setup_remote_docker
      - pip_install
      - test
      - run:
          name: Code Coverage
          command: make coverage
      - run:
          name: Test build
          command: make build

  test-macos:
    executor: osx
    working_directory: ~/mtls-cli
    steps:
      - attach_workspace:
          at: ~/mtls-cli
      - brew
      - setup_remote_docker
      - pip_install:
          dir: /Users/distiller/.local/share/virtualenvs/
          key: osx
      - test
      - run:
          name: Code Coverage
          command: make coverage
      - run:
          name: Test build
          command: make build

filter_all_tags: &filter_all_tags
  filters:
    tags:
      only: /.*/

filter_only_tags: &filter_only_tags
  filters:
    tags:
      only: /.*/
    branches:
      ignore: /.*/

workflows:
  version: 2
  build:
    jobs:
      - init:
          <<: *filter_all_tags
      - lint:
          <<: *filter_all_tags
          requires:
            - init
      # - test:
      #     <<: *filter_all_tags
      #     requires:
      #     - init
      # - test-macos:
      #     <<: *filter_all_tags
      #     requires:
      #     - init
      - build-package-pypi:
          <<: *filter_all_tags
          requires:
            - lint
